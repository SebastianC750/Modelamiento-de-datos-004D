/* ============================================================
   MINI-MARKET "DOÑA MARTA" — SEMANA 8
   FULL SCRIPT: DROP SAFE + CREATE + CASO 2 (ALTER) + CASO 3 (POBLAR)
   Autor: Sebastián
   ============================================================ */

------------------------------------------------------------------------
-- A) LIMPIEZA: borra cualquier objeto que bloquee los nombres
------------------------------------------------------------------------
DECLARE
  PROCEDURE safe_exec(p_sql VARCHAR2) IS
  BEGIN
    EXECUTE IMMEDIATE p_sql;
  EXCEPTION WHEN OTHERS THEN NULL; -- ignora si no existe
  END;
BEGIN
  -- Vistas / Sinónimos
  FOR r IN (
    SELECT object_name, object_type
    FROM user_objects
    WHERE object_name IN (
      'REGION','SALUD','AFP','MEDIO_PAGO','MARCA','CATEGORIA','COMUNA',
      'PROVEEDOR','EMPLEADO','ADMINISTRATIVO','VENDEDOR','PRODUCTO',
      'VENTA','DETALLE_VENTA'
    )
    AND object_type IN ('VIEW','SYNONYM')
  ) LOOP
    IF r.object_type = 'VIEW'    THEN safe_exec('DROP VIEW '||r.object_name); END IF;
    IF r.object_type = 'SYNONYM' THEN safe_exec('DROP SYNONYM '||r.object_name); END IF;
  END LOOP;

  -- Tablas
  FOR t IN (
    SELECT table_name
    FROM user_tables
    WHERE table_name IN (
      'DETALLE_VENTA','VENTA','PRODUCTO','VENDEDOR','ADMINISTRATIVO',
      'EMPLEADO','PROVEEDOR','COMUNA','MEDIO_PAGO','MARCA',
      'CATEGORIA','AFP','SALUD','REGION'
    )
  ) LOOP
    safe_exec('DROP TABLE '||t.table_name||' CASCADE CONSTRAINTS PURGE');
  END LOOP;

  -- Secuencias (por si quedaron)
  FOR s IN (
    SELECT sequence_name
    FROM user_sequences
    WHERE sequence_name IN ('SEQ_SALUD','SEQ_EMPLEADO')
  ) LOOP
    safe_exec('DROP SEQUENCE '||s.sequence_name);
  END LOOP;

  -- Índices sueltos con esos nombres (por si acaso)
  FOR i IN (
    SELECT index_name
    FROM user_indexes
    WHERE index_name IN (
      'REGION','SALUD','AFP','MEDIO_PAGO','MARCA','CATEGORIA','COMUNA',
      'PROVEEDOR','EMPLEADO','ADMINISTRATIVO','VENDEDOR','PRODUCTO',
      'VENTA','DETALLE_VENTA'
    )
  ) LOOP
    safe_exec('DROP INDEX '||i.index_name);
  END LOOP;
END;
/
------------------------------------------------------------------------
-- B) CREACIÓN DE TABLAS (PK + FK). Sin ALTER aquí.
------------------------------------------------------------------------

-- REGION
CREATE TABLE REGION (
  id_region   NUMBER(4)     NOT NULL,
  nom_region  VARCHAR2(255) NOT NULL,
  CONSTRAINT PK_REGION PRIMARY KEY (id_region)
);

-- SALUD
CREATE TABLE SALUD (
  id_salud   NUMBER(4)     NOT NULL,
  nom_salud  VARCHAR2(40)  NOT NULL,
  CONSTRAINT PK_SALUD PRIMARY KEY (id_salud)
);

-- AFP (IDENTITY: inicia 210, +6)
CREATE TABLE AFP (
  id_afp   NUMBER(5) GENERATED BY DEFAULT AS IDENTITY
           (START WITH 210 INCREMENT BY 6 MINVALUE 210) NOT NULL,
  nom_afp  VARCHAR2(255) NOT NULL,
  CONSTRAINT PK_AFP PRIMARY KEY (id_afp)
);

-- MEDIO_PAGO
CREATE TABLE MEDIO_PAGO (
  id_mpago      NUMBER(3)    NOT NULL,
  nombre_mpago  VARCHAR2(50) NOT NULL,
  CONSTRAINT PK_MEDIO_PAGO PRIMARY KEY (id_mpago)
);

-- MARCA
CREATE TABLE MARCA (
  id_marca      NUMBER(3)    NOT NULL,
  nombre_marca  VARCHAR2(25) NOT NULL,
  CONSTRAINT PK_MARCA PRIMARY KEY (id_marca)
);

-- CATEGORIA
CREATE TABLE CATEGORIA (
  id_categoria      NUMBER(3)      NOT NULL,
  nombre_categoria  VARCHAR2(255)  NOT NULL,
  CONSTRAINT PK_CATEGORIA PRIMARY KEY (id_categoria)
);

-- COMUNA
CREATE TABLE COMUNA (
  id_comuna   NUMBER(4)      NOT NULL,
  nom_comuna  VARCHAR2(100)  NOT NULL,
  cod_region  NUMBER(4)      NOT NULL,
  CONSTRAINT PK_COMUNA PRIMARY KEY (id_comuna),
  CONSTRAINT FK_COMUNA_REGION FOREIGN KEY (cod_region)
    REFERENCES REGION(id_region)
);

-- PROVEEDOR
CREATE TABLE PROVEEDOR (
  id_proveedor      NUMBER(5)      NOT NULL,
  nombre_proveedor  VARCHAR2(150)  NOT NULL,
  rut_proveedor     VARCHAR2(10)   NOT NULL,
  telefono          VARCHAR2(10)   NOT NULL,
  email             VARCHAR2(200)  NOT NULL,
  direccion         VARCHAR2(200)  NOT NULL,
  cod_comuna        NUMBER(4)      NOT NULL,
  CONSTRAINT PK_PROVEEDOR PRIMARY KEY (id_proveedor),
  CONSTRAINT FK_PROVEEDOR_COMUNA FOREIGN KEY (cod_comuna)
    REFERENCES COMUNA(id_comuna)
);

-- EMPLEADO
CREATE TABLE EMPLEADO (
  id_empleado        NUMBER(4)     NOT NULL,
  rut_empleado       VARCHAR2(10)  NOT NULL,
  nombre_empleado    VARCHAR2(25)  NOT NULL,
  apellido_paterno   VARCHAR2(25)  NOT NULL,
  apellido_materno   VARCHAR2(25)  NOT NULL,
  fecha_contratacion DATE          NOT NULL,
  sueldo_base        NUMBER(10)    NOT NULL,
  bono_jefatura      NUMBER(10),
  activo             CHAR(1)       NOT NULL,  -- 'S'/'N'
  tipo_empleado      VARCHAR2(25)  NOT NULL,  -- ADMIN / VENDEDOR
  cod_empleado       NUMBER(4),               -- jefe (nullable)
  cod_salud          NUMBER(4)     NOT NULL,
  cod_afp            NUMBER(5)     NOT NULL,
  CONSTRAINT PK_EMPLEADO PRIMARY KEY (id_empleado),
  CONSTRAINT FK_EMPLEADO_SALUD     FOREIGN KEY (cod_salud)    REFERENCES SALUD(id_salud),
  CONSTRAINT FK_EMPLEADO_AFP       FOREIGN KEY (cod_afp)      REFERENCES AFP(id_afp),
  CONSTRAINT FK_EMPLEADO_EMPLEADO  FOREIGN KEY (cod_empleado) REFERENCES EMPLEADO(id_empleado),
  CONSTRAINT CK_EMPLEADO_ACTIVO CHECK (activo IN ('S','N'))
);

-- ADMINISTRATIVO
CREATE TABLE ADMINISTRATIVO (
  id_empleado NUMBER(4) NOT NULL,
  CONSTRAINT PK_ADMINISTRATIVO PRIMARY KEY (id_empleado),
  CONSTRAINT FK_ADMIN_EMPLEADO FOREIGN KEY (id_empleado)
    REFERENCES EMPLEADO(id_empleado)
);

-- VENDEDOR
CREATE TABLE VENDEDOR (
  id_empleado     NUMBER(4)    NOT NULL,
  comision_venta  NUMBER(5,2)  NOT NULL,
  CONSTRAINT PK_VENDEDOR PRIMARY KEY (id_empleado),
  CONSTRAINT FK_VENDEDOR_EMPLEADO FOREIGN KEY (id_empleado)
    REFERENCES EMPLEADO(id_empleado)
);

-- PRODUCTO
CREATE TABLE PRODUCTO (
  id_producto      NUMBER(4)       NOT NULL,
  nombre_producto  VARCHAR2(100)   NOT NULL,
  precio_unitario  NUMBER          NOT NULL,
  origen_nacional  CHAR(1)         NOT NULL,  -- 'S'/'N'
  stock_minimo     NUMBER(3)       NOT NULL,
  activo           CHAR(1)         NOT NULL,  -- 'S'/'N'
  cod_marca        NUMBER(3)       NOT NULL,
  cod_categoria    NUMBER(3)       NOT NULL,
  cod_proveedor    NUMBER(5)       NOT NULL,
  CONSTRAINT PK_PRODUCTO PRIMARY KEY (id_producto),
  CONSTRAINT FK_PRODUCTO_MARCA     FOREIGN KEY (cod_marca)     REFERENCES MARCA(id_marca),
  CONSTRAINT FK_PRODUCTO_CATEGORIA FOREIGN KEY (cod_categoria) REFERENCES CATEGORIA(id_categoria),
  CONSTRAINT FK_PRODUCTO_PROVEEDOR FOREIGN KEY (cod_proveedor) REFERENCES PROVEEDOR(id_proveedor),
  CONSTRAINT CK_PRODUCTO_ACTIVO CHECK (activo IN ('S','N')),
  CONSTRAINT CK_PRODUCTO_ORIGEN CHECK (origen_nacional IN ('S','N'))
);

-- VENTA (IDENTITY: inicia 5050, +3)
CREATE TABLE VENTA (
  id_venta     NUMBER(4) GENERATED BY DEFAULT AS IDENTITY
               (START WITH 5050 INCREMENT BY 3 MINVALUE 5050) NOT NULL,
  fecha_venta  DATE       NOT NULL,
  total_venta  NUMBER(10) NOT NULL,
  cod_mpago    NUMBER(3)  NOT NULL,
  cod_empleado NUMBER(4)  NOT NULL,
  CONSTRAINT PK_VENTA PRIMARY KEY (id_venta),
  CONSTRAINT FK_VENTA_MEDIO_PAGO FOREIGN KEY (cod_mpago)    REFERENCES MEDIO_PAGO(id_mpago),
  CONSTRAINT FK_VENTA_EMPLEADO   FOREIGN KEY (cod_empleado) REFERENCES EMPLEADO(id_empleado)
);

-- DETALLE_VENTA
CREATE TABLE DETALLE_VENTA (
  cod_venta     NUMBER(4) NOT NULL,
  cod_producto  NUMBER(4) NOT NULL,
  cantidad      NUMBER(6) NOT NULL,
  CONSTRAINT PK_DETALLE_VENTA PRIMARY KEY (cod_venta, cod_producto),
  CONSTRAINT FK_DET_VTA_VENTA    FOREIGN KEY (cod_venta)    REFERENCES VENTA(id_venta),
  CONSTRAINT FK_DET_VTA_PRODUCTO FOREIGN KEY (cod_producto) REFERENCES PRODUCTO(id_producto)
);

------------------------------------------------------------------------
-- C) CASO 2 — ALTER TABLE (reglas de negocio) — CORREGIDO
------------------------------------------------------------------------

-- EMPLEADO: sueldo base >= 400000
BEGIN
  EXECUTE IMMEDIATE 'ALTER TABLE EMPLEADO DROP CONSTRAINT CK_EMPLEADO_SUELDO_MIN';
EXCEPTION WHEN OTHERS THEN
  IF SQLCODE != -2443 THEN RAISE; END IF;  -- -2443 = ORA-02443 (no existe)
END;
/
ALTER TABLE EMPLEADO
  ADD CONSTRAINT CK_EMPLEADO_SUELDO_MIN CHECK (sueldo_base >= 400000);

-- VENDEDOR: comisión entre 0 y 0.25
BEGIN
  EXECUTE IMMEDIATE 'ALTER TABLE VENDEDOR DROP CONSTRAINT CK_VENDEDOR_COMISION';
EXCEPTION WHEN OTHERS THEN
  IF SQLCODE != -2443 THEN RAISE; END IF;
END;
/
BEGIN
  EXECUTE IMMEDIATE 'ALTER TABLE VENDEDOR DROP CONSTRAINT CK_VENDEDOR_RANGO_COMISION';
EXCEPTION WHEN OTHERS THEN
  IF SQLCODE != -2443 THEN RAISE; END IF;
END;
/
ALTER TABLE VENDEDOR
  ADD CONSTRAINT CK_VENDEDOR_RANGO_COMISION
  CHECK (comision_venta BETWEEN 0 AND 0.25);

-- PRODUCTO: stock mínimo >= 3
BEGIN
  EXECUTE IMMEDIATE 'ALTER TABLE PRODUCTO DROP CONSTRAINT CK_PRODUCTO_STOCK_MIN';
EXCEPTION WHEN OTHERS THEN
  IF SQLCODE != -2443 THEN RAISE; END IF;
END;
/
ALTER TABLE PRODUCTO
  ADD CONSTRAINT CK_PRODUCTO_STOCK_MIN CHECK (stock_minimo >= 3);

-- PROVEEDOR: email único
BEGIN
  EXECUTE IMMEDIATE 'ALTER TABLE PROVEEDOR DROP CONSTRAINT UQ_PROVEEDOR_EMAIL';
EXCEPTION WHEN OTHERS THEN
  IF SQLCODE != -2443 THEN RAISE; END IF;
END;
/
ALTER TABLE PROVEEDOR
  ADD CONSTRAINT UQ_PROVEEDOR_EMAIL UNIQUE (email);

-- MARCA: nombre único
BEGIN
  EXECUTE IMMEDIATE 'ALTER TABLE MARCA DROP CONSTRAINT UQ_MARCA_NOMBRE';
EXCEPTION WHEN OTHERS THEN
  IF SQLCODE != -2443 THEN RAISE; END IF;
END;
/
ALTER TABLE MARCA
  ADD CONSTRAINT UQ_MARCA_NOMBRE UNIQUE (nombre_marca);

-- DETALLE_VENTA: cantidad > 0
BEGIN
  EXECUTE IMMEDIATE 'ALTER TABLE DETALLE_VENTA DROP CONSTRAINT CK_DETALLE_VTA_CANTIDAD_POS';
EXCEPTION WHEN OTHERS THEN
  IF SQLCODE != -2443 THEN RAISE; END IF;
END;
/
ALTER TABLE DETALLE_VENTA
  ADD CONSTRAINT CK_DETALLE_VTA_CANTIDAD_POS CHECK (cantidad > 0);

------------------------------------------------------------------------
-- D) CASO 3 — POBLAMIENTO (secuencias + inserts en orden)
------------------------------------------------------------------------

-- Secuencias (drop seguro por si se re-ejecuta)
-- Drop SEQ_SALUD si existe (silencioso)
BEGIN
  EXECUTE IMMEDIATE 'DROP SEQUENCE SEQ_SALUD';
EXCEPTION WHEN OTHERS THEN
  IF SQLCODE != -2289 THEN RAISE; END IF;  -- -2289 = ORA-02289 (no existe la secuencia)
END;
/
-- Drop SEQ_EMPLEADO si existe (silencioso)
BEGIN
  EXECUTE IMMEDIATE 'DROP SEQUENCE SEQ_EMPLEADO';
EXCEPTION WHEN OTHERS THEN
  IF SQLCODE != -2289 THEN RAISE; END IF;  -- -2289 = ORA-02289
END;
/


-- Crear secuencias requeridas
CREATE SEQUENCE SEQ_SALUD     START WITH 2050 INCREMENT BY 10 MINVALUE 2050 NOCACHE NOCYCLE;
CREATE SEQUENCE SEQ_EMPLEADO  START WITH 750  INCREMENT BY 3  MINVALUE 750  NOCACHE NOCYCLE;

-- REGION
INSERT INTO REGION (id_region, nom_region) VALUES (1, 'Región Metropolitana');
INSERT INTO REGION (id_region, nom_region) VALUES (2, 'Valparaíso');
INSERT INTO REGION (id_region, nom_region) VALUES (3, 'Biobío');
INSERT INTO REGION (id_region, nom_region) VALUES (4, 'Los Lagos');

-- MEDIO_PAGO
INSERT INTO MEDIO_PAGO (id_mpago, nombre_mpago) VALUES (11, 'Efectivo');
INSERT INTO MEDIO_PAGO (id_mpago, nombre_mpago) VALUES (12, 'Tarjeta Débito');
INSERT INTO MEDIO_PAGO (id_mpago, nombre_mpago) VALUES (13, 'Tarjeta Crédito');
INSERT INTO MEDIO_PAGO (id_mpago, nombre_mpago) VALUES (14, 'Cheque');

-- AFP (IDENTITY: 210, 216, 222, 228)
INSERT INTO AFP (nom_afp) VALUES ('AFP Habitat');
INSERT INTO AFP (nom_afp) VALUES ('AFP Cuprum');
INSERT INTO AFP (nom_afp) VALUES ('AFP Provida');
INSERT INTO AFP (nom_afp) VALUES ('AFP PlanVital');

-- SALUD (SEQ_SALUD: 2050, 2060, 2070, 2080)
INSERT INTO SALUD (id_salud, nom_salud) VALUES (SEQ_SALUD.NEXTVAL, 'Fonasa');
INSERT INTO SALUD (id_salud, nom_salud) VALUES (SEQ_SALUD.NEXTVAL, 'Isapre Colmena');
INSERT INTO SALUD (id_salud, nom_salud) VALUES (SEQ_SALUD.NEXTVAL, 'Isapre Banmédica');
INSERT INTO SALUD (id_salud, nom_salud) VALUES (SEQ_SALUD.NEXTVAL, 'Isapre Cruz Blanca');

-- EMPLEADO (IDs con SEQ_EMPLEADO) 10 ejemplos (incluye jefatura luego)
INSERT INTO EMPLEADO (
  id_empleado, rut_empleado, nombre_empleado, apellido_paterno, apellido_materno,
  fecha_contratacion, sueldo_base, bono_jefatura, activo, tipo_empleado,
  cod_empleado, cod_salud, cod_afp
) VALUES (
  SEQ_EMPLEADO.NEXTVAL, '75111111-1', 'Marcela', 'Gonzalez', 'Perez',
  TO_DATE('10-07-2021','DD-MM-YYYY'), 590000, 80000, 'S', 'Administrativo',
  NULL,
  (SELECT id_salud FROM SALUD WHERE nom_salud='Fonasa'),
  (SELECT id_afp   FROM AFP   WHERE nom_afp='AFP Habitat')
);

INSERT INTO EMPLEADO VALUES (
  SEQ_EMPLEADO.NEXTVAL, '75322222-2', 'Jose', 'Muñoz', 'Ramirez',
  TO_DATE('15-01-2022','DD-MM-YYYY'), 500000, NULL, 'S', 'Administrativo',
  NULL,
  (SELECT id_salud FROM SALUD WHERE nom_salud='Isapre Colmena'),
  (SELECT id_afp   FROM AFP   WHERE nom_afp='AFP Cuprum')
);

INSERT INTO EMPLEADO VALUES (
  SEQ_EMPLEADO.NEXTVAL, '76433333-3', 'Veronica', 'Soto', 'Alarcon',
  TO_DATE('08-07-2022','DD-MM-YYYY'), 580000, 70000, 'S', 'Administrativo',
  NULL,
  (SELECT id_salud FROM SALUD WHERE nom_salud='Isapre Banmédica'),
  (SELECT id_afp   FROM AFP   WHERE nom_afp='AFP Provida')
);

INSERT INTO EMPLEADO VALUES (
  SEQ_EMPLEADO.NEXTVAL, '76944444-4', 'Luis', 'Reyes', 'Fuentes',
  TO_DATE('03-03-2023','DD-MM-YYYY'), 520000, NULL, 'S', 'Vendedor',
  NULL,
  (SELECT id_salud FROM SALUD WHERE nom_salud='Fonasa'),
  (SELECT id_afp   FROM AFP   WHERE nom_afp='AFP Cuprum')
);

INSERT INTO EMPLEADO VALUES (
  SEQ_EMPLEADO.NEXTVAL, '76555555-5', 'Claudia', 'Fernandez', 'Lagos',
  TO_DATE('21-05-2023','DD-MM-YYYY'), 530000, NULL, 'S', 'Vendedor',
  NULL,
  (SELECT id_salud FROM SALUD WHERE nom_salud='Isapre Cruz Blanca'),
  (SELECT id_afp   FROM AFP   WHERE nom_afp='AFP Habitat')
);

INSERT INTO EMPLEADO VALUES (
  SEQ_EMPLEADO.NEXTVAL, '76666666-6', 'Carlos', 'Navarro', 'Vega',
  TO_DATE('11-08-2021','DD-MM-YYYY'), 560000, NULL, 'S', 'Administrativo',
  NULL,
  (SELECT id_salud FROM SALUD WHERE nom_salud='Isapre Banmédica'),
  (SELECT id_afp   FROM AFP   WHERE nom_afp='AFP Provida')
);

INSERT INTO EMPLEADO VALUES (
  SEQ_EMPLEADO.NEXTVAL, '76777777-7', 'Andrea', 'Rojas', 'Ponce',
  TO_DATE('09-12-2022','DD-MM-YYYY'), 545000, NULL, 'S', 'Administrativo',
  NULL,
  (SELECT id_salud FROM SALUD WHERE nom_salud='Isapre Colmena'),
  (SELECT id_afp   FROM AFP   WHERE nom_afp='AFP Cuprum')
);

INSERT INTO EMPLEADO VALUES (
  SEQ_EMPLEADO.NEXTVAL, '77888888-8', 'Diego', 'Melo', 'Contreras',
  TO_DATE('18-04-2023','DD-MM-YYYY'), 500000, NULL, 'S', 'Vendedor',
  NULL,
  (SELECT id_salud FROM SALUD WHERE nom_salud='Fonasa'),
  (SELECT id_afp   FROM AFP   WHERE nom_afp='AFP PlanVital')
);

INSERT INTO EMPLEADO VALUES (
  SEQ_EMPLEADO.NEXTVAL, '77499999-9', 'Fernanda', 'Salas', 'Herrera',
  TO_DATE('18-05-2023','DD-MM-YYYY'), 570000, NULL, 'S', 'Vendedor',
  NULL,
  (SELECT id_salud FROM SALUD WHERE nom_salud='Isapre Banmédica'),
  (SELECT id_afp   FROM AFP   WHERE nom_afp='AFP PlanVital')
);

INSERT INTO EMPLEADO VALUES (
  SEQ_EMPLEADO.NEXTVAL, '77710101-0', 'Tomas', 'Vidal', 'Espinoza',
  TO_DATE('01-06-2023','DD-MM-YYYY'), 530000, NULL, 'S', 'Vendedor',
  NULL,
  (SELECT id_salud FROM SALUD WHERE nom_salud='Isapre Colmena'),
  (SELECT id_afp   FROM AFP   WHERE nom_afp='AFP Provida')
);

-- Jefatura: todos reportan a Marcela
UPDATE EMPLEADO e
   SET cod_empleado = (SELECT id_empleado FROM EMPLEADO WHERE rut_empleado='75111111-1')
 WHERE e.rut_empleado <> '75111111-1';

-- VENDEDOR (ids desde EMPLEADO) - comisiones válidas
INSERT INTO VENDEDOR (id_empleado, comision_venta)
SELECT id_empleado, 0.12 FROM EMPLEADO WHERE rut_empleado='76944444-4'; -- Luis
INSERT INTO VENDEDOR (id_empleado, comision_venta)
SELECT id_empleado, 0.10 FROM EMPLEADO WHERE rut_empleado='76555555-5'; -- Claudia
INSERT INTO VENDEDOR (id_empleado, comision_venta)
SELECT id_empleado, 0.18 FROM EMPLEADO WHERE rut_empleado='77888888-8'; -- Diego
INSERT INTO VENDEDOR (id_empleado, comision_venta)
SELECT id_empleado, 0.08 FROM EMPLEADO WHERE rut_empleado='77499999-9'; -- Fernanda
INSERT INTO VENDEDOR (id_empleado, comision_venta)
SELECT id_empleado, 0.20 FROM EMPLEADO WHERE rut_empleado='77710101-0'; -- Tomas

-- VENTA (IDENTITY genera 5050, 5053, 5056)
INSERT INTO VENTA (fecha_venta, total_venta, cod_mpago, cod_empleado)
VALUES (TO_DATE('12-05-2023','DD-MM-YYYY'), 225999, 12,
        (SELECT id_empleado FROM EMPLEADO WHERE rut_empleado='76944444-4'));

INSERT INTO VENTA (fecha_venta, total_venta, cod_mpago, cod_empleado)
VALUES (TO_DATE('23-10-2023','DD-MM-YYYY'), 252499, 13,
        (SELECT id_empleado FROM EMPLEADO WHERE rut_empleado='77710101-0'));

INSERT INTO VENTA (fecha_venta, total_venta, cod_mpago, cod_empleado)
VALUES (TO_DATE('17-02-2023','DD-MM-YYYY'), 466999, 11,
        (SELECT id_empleado FROM EMPLEADO WHERE rut_empleado='76555555-5'));

COMMIT;

/* ===========================
   INFORME 1: Activos con bono
   =========================== */
SELECT
  e.id_empleado AS "IDENTIFICADOR",
  e.nombre_empleado || ' ' || e.apellido_paterno || ' ' || e.apellido_materno AS "NOMBRE COMPLETO",
  e.sueldo_base AS "SALARIO",
  e.bono_jefatura AS "BONIFICACION",
  e.sueldo_base + e.bono_jefatura AS "SALARIO SIMULADO"
FROM EMPLEADO e
WHERE e.activo = 'S'
  AND e.bono_jefatura IS NOT NULL
ORDER BY 5 DESC, e.apellido_paterno DESC;  -- 5 = "SALARIO SIMULADO"

/* ==========================================
   INFORME 2: Sueldos en rango 550k–800k
   ========================================== */
SELECT
  e.nombre_empleado || ' ' || e.apellido_paterno || ' ' || e.apellido_materno AS "EMPLEADO",
  e.sueldo_base AS "SUELDO",
  e.sueldo_base * 0.08 AS "POSIBLE AUMENTO",
  e.sueldo_base * 1.08 AS "SUELDO SIMULADO"
FROM EMPLEADO e
WHERE e.sueldo_base BETWEEN 550000 AND 800000      -- inclusive
ORDER BY e.sueldo_base ASC;

